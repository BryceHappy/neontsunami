{"version":3,"names":[],"mappings":"","sources":["app.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nrequire('./shards');\n\n$(function () {\n  $('.shards').shards([239, 84, 17, 0.5], [245, 153, 113, 0.5], [255, 255, 255, 0.5], 1, 1, 1, 1, false);\n});\n\n},{\"./shards\":2}],2:[function(require,module,exports){\n'use strict';\n\n/**\n* Shards jQuery plug-in\n* Multilayered gradient background effect\n*\n* @author Jean-Christophe Nicolas <mrjcnicolas@gmail.com>\n* @homepage http://bite-software.co.uk/shards/\n* @version 1.1\n* @license MIT http://opensource.org/licenses/MIT\n* @date 03-06-2013\n*/\n(function ($) {\n\n    var Plugin = function Plugin(me, c1, c2, sh, steps, wheel, light, alf, fs) {\n\n        this.el = me;\n        this.sharp = true;\n        this.fs = fs;\n        this.filter = '';\n        this.colours = {\n            c1: c1,\n            c2: c2,\n            c3: c2,\n            shade: sh,\n            alpha: alf,\n            steps: steps,\n            wheel: wheel,\n            light: ~~light\n        };\n        this.init();\n    };\n    Plugin.prototype.init = function () {\n\n        this.cssPrefix = false;\n\n        var ua = navigator.userAgent;\n        if (/Chrome\\/(\\S+)/.test(ua) || /AppleWebKit\\/(\\S+)/.test(ua)) {\n            this.cssPrefix = '-webkit';\n        } else if (/Firefox\\/(\\S+)/.test(ua)) {\n            this.cssPrefix = '-moz';\n        } else if (window.opera) {\n            this.cssPrefix = '-o';\n        } else if (/MSIE ([^;]+)/.test(ua)) {\n            this.cssPrefix = '-ms';\n        };\n\n        if (this.cssPrefix) {\n            var steps = this.colours.steps;\n\n            while (steps > 0) {\n                this.percents = this.percentage();\n                this.stringBuilder();\n                this.colourFilter();\n                steps -= 1;\n                if (steps > 0) this.filter += ', ';\n            }\n            this.el.css('background-image', this.filter);\n\n            if (this.fs) this.fit();\n        } else {\n            console.log('sorry bro, your browser isnt supported.');\n        }\n    };\n    Plugin.prototype.stringBuilder = function () {\n\n        var col = this.colours,\n            c1 = this.catcol(col.c1),\n            c2 = this.catcol(col.c2),\n            c3 = this.catcol(col.c3),\n            shade = this.catcol(col.shade),\n            deg = ~~(Math.random() * 360);\n\n        this.filter += this.cssPrefix + '-linear-gradient(' + deg + 'deg,' + c1 + ' ' + this.percents.a + ' ,' + shade + ' ' + this.percents.b + ', ' + c2 + ' ' + this.percents.c + ', ' + c3 + ' ' + this.percents.d + ')';\n    };\n    Plugin.prototype.catcol = function (col) {\n\n        var beg = 'rgba(',\n            end = ')',\n            part = col.toString();\n\n        return beg.concat(part).concat(end);\n    };\n    Plugin.prototype.fit = function () {\n        this.el.css({\n            'width': '100%',\n            'height': window.innerHeight\n        });\n    };\n\n    Plugin.prototype.percentage = function () {\n\n        var p1 = ~~(Math.random() * 85),\n            p2 = p1 + ~~(Math.random() * 15),\n            p3 = p2,\n            p4 = 100 - p2 + ~~(Math.random() * p2);\n\n        var percents = {\n            a: p1 + '%',\n            b: p2 + '%',\n            c: p3 + '%',\n            d: p4 + '%'\n        };\n\n        return percents;\n    };\n    Plugin.prototype.colourFilter = function () {\n\n        var col = this.colours;\n\n        col.c1 = this.colstep(col.c1);\n        col.c1.push(col.alpha);\n        col.c2 = this.colstep(col.c2);\n        col.c2.push(col.alpha);\n        col.c3 = this.colstep(col.c2);\n        col.c3.push(col.alpha);\n        col.shade = this.colstep(col.shade);\n        col.shade.push(col.alpha);\n    };\n    Plugin.prototype.colstep = function (col) {\n\n        var hsl = this.hsl(col),\n            wheel = this.colours.wheel,\n            hue = 360 * wheel;\n\n        if (this.colours.light > 3) this.colours.light = 3;\n\n        hsl[0] = hsl[0] - ~~(Math.random() * hue / 2) + ~~(Math.random() * hue / 2);\n        hsl[1] = wheel * 100;\n        hsl[2] = 30 * this.colours.light;\n        return this.rgb(hsl);\n    };\n    Plugin.prototype.hsl = function (rgb) {\n\n        var r1 = rgb[0] / 255;\n        var g1 = rgb[1] / 255;\n        var b1 = rgb[2] / 255;\n        var maxColor = Math.max(r1, g1, b1);\n        var minColor = Math.min(r1, g1, b1);\n        //Calculate L:\n        var L = (maxColor + minColor) / 2;\n        var S = 0;\n        var H = 0;\n        if (maxColor != minColor) {\n            //Calculate S:\n            if (L < 0.5) {\n                S = (maxColor - minColor) / (maxColor + minColor);\n            } else {\n                S = (maxColor - minColor) / (2.0 - maxColor - minColor);\n            }\n            //Calculate H:\n            if (r1 == maxColor) {\n                H = (g1 - b1) / (maxColor - minColor);\n            } else if (g1 == maxColor) {\n                H = 2.0 + (b1 - r1) / (maxColor - minColor);\n            } else {\n                H = 4.0 + (r1 - g1) / (maxColor - minColor);\n            }\n        }\n\n        L = L * 100;\n        S = S * 100;\n        H = H * 60;\n        if (H < 0) {\n            H += 360;\n        }\n\n        var result = [H, S, L];\n        return result;\n    };\n    Plugin.prototype.rgb = function (hsl) {\n        var h = hsl[0];\n        var s = hsl[1];\n        var l = hsl[2];\n\n        var m1, m2, hue;\n        var r, g, b;\n        s /= 100;\n        l /= 100;\n        if (s == 0) r = g = b = l * 255;else {\n            if (l <= 0.5) m2 = l * (s + 1);else m2 = l + s - l * s;\n            m1 = l * 2 - m2;\n            hue = h / 360;\n            r = this.hue2rgb(m1, m2, hue + 1 / 3);\n            g = this.hue2rgb(m1, m2, hue);\n            b = this.hue2rgb(m1, m2, hue - 1 / 3);\n        }\n        return [Math.round(r), Math.round(g), Math.round(b)];\n    };\n    Plugin.prototype.hue2rgb = function (m1, m2, hue) {\n        var v;\n        if (hue < 0) hue += 1;else if (hue > 1) hue -= 1;\n\n        if (6 * hue < 1) v = m1 + (m2 - m1) * hue * 6;else if (2 * hue < 1) v = m2;else if (3 * hue < 2) v = m1 + (m2 - m1) * (2 / 3 - hue) * 6;else v = m1;\n\n        return 255 * v;\n    };\n    $.fn.shards = function (colour1, colour2, shadeColour, steps, wheel, lightness, alpha, fullscreen) {\n\n        var el = $(this);\n        var shards = new Plugin(el, colour1, colour2, shadeColour, steps, wheel, lightness, alpha, fullscreen);\n\n        if (fullscreen) {\n            $(window).resize(function () {\n                shards.fit();\n            });\n        }\n\n        return this.el;\n    };\n})(jQuery);\n\n},{}]},{},[1]);\n"],"file":"app.js","sourceRoot":"/source/"}